(defun declinar (raiz caso num decl)
  (find (list num caso raiz)
        (funcall decl raiz)
        :key #'(lambda (x) (subseq x 0 3))
        :test #'equal))

(defun 1-declinacao (raiz)
  (list
   (list 'sing 'nom raiz 'a)
   (list 'sing 'voc raiz 'a)
   (list 'sing 'gen raiz 'ae)
   (list 'sing 'dat raiz 'ae)
   (list 'sing 'abl raiz 'a)
   (list 'sing 'ac raiz 'am)
   (list 'plur 'nom raiz 'ae)
   (list 'plur 'voc raiz 'ae)
   (list 'plur 'gen raiz 'arum)
   (list 'plur 'dat raiz 'is)
   (list 'plur 'abl raiz 'is)
   (list 'plur 'ac raiz 'as)))

(defun 2-declinacao-m (raiz)
  (list
   (list 'sing 'nom raiz 'us)
   (list 'sing 'voc raiz 'e)
   (list 'sing 'gen raiz 'i)
   (list 'sing 'dat raiz 'o)
   (list 'sing 'abl raiz 'o)
   (list 'sing 'ac raiz 'um)
   (list 'plur 'nom raiz 'i)
   (list 'plur 'voc raiz 'i)
   (list 'plur 'gen raiz 'orum)
   (list 'plur 'dat raiz 'is)
   (list 'plur 'abl raiz 'is)
   (list 'plur 'ac raiz 'os)))

(defun 2-declinacao-n (raiz)
  (list
   (list 'sing 'nom raiz 'um)
   (list 'sing 'voc raiz 'um)
   (list 'sing 'gen raiz 'i)
   (list 'sing 'dat raiz 'o)
   (list 'sing 'abl raiz 'o)
   (list 'sing 'ac raiz 'um)
   (list 'plur 'nom raiz 'a)
   (list 'plur 'voc raiz 'a)
   (list 'plur 'gen raiz 'orum)
   (list 'plur 'dat raiz 'is)
   (list 'plur 'abl raiz 'is)
   (list 'plur 'ac raiz 'a)))
