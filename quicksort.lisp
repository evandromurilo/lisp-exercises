(defun quicksort (arr end)
  (let ((mid (floor end 2))
        (left (make-array (1- end)))
        (right (make-array (1- end)))
        (l 0)
        (r 0)
        (sorted (make-array end)))
    (dotimes (i end)
      (unless (= i mid)
        (if (<= (aref arr i) (aref arr mid))
            (progn
              (setf (aref left l) (aref arr i))
              (incf l))
            (progn
              (setf (aref right r) (aref arr i))
              (incf r)))))
    (when (> l 1)
      (setf left (quicksort left l)))
    (when (> r 1)
      (setf right (quicksort right r)))
    (dotimes (i end)
      (cond ((< i l) (setf (aref sorted i) (aref left i)))
            ((= i l) (setf (aref sorted i) (aref arr mid)))
            (t       (setf (aref sorted i) (aref right (- i l 1))))))
    sorted))
