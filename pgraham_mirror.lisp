(defun mirror? (s)
  (let ((len (length s)))
    (and (evenp len)
         (do ((forward 0 (+ forward 1))
              (back (- len 1) (- back 1)))
             ((or (> forward back)
                  (not (eql (elt s forward)
                            (elt s back))))
              (> forward back))))))

(defun palindrome? (s)
  (let ((mid (/ (length s) 2)))
    (equal (subseq s 0 (floor mid))
           (reverse (subseq s (ceiling mid))))))
    
